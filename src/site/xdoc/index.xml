<?xml version="1.0" encoding="UTF-8" ?>
<document
        xmlns="http://maven.apache.org/XDOC/2.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>OpenMM Java Wrapper Home Page</title>
        <author email="hernan-bernabe@uiowa.edu">Hernan V. Bernabe</author>
    </properties>
    <body>
        <section name="OpenMM Introduction">
            <p>
                The OpenMM module contain Java Wrappers for the OpenMM API automatically generated using Jnaerator.
            </p>
            <subsection name="Generation of the Java OpenMM Wrappers using Jnaerator">
                <p>
                    Ensure that the latest version of OpenMM is installed on your machine. For example, using Anaconda
                    the command is
                </p>
                <source>conda install -c omnia openmm</source>
                <p>
                    The following Jnaerator command can then be used
                </p>
                <source>java -jar jnaerator-0.12-shaded.jar config.jnaerator</source>
                <p>
                    where the contents of "config.jnaerator" are given by
                </p>
                <source>
-limitComments

-runtime JNA

-direct

-skipDeprecated

-mode Jar

-jar openmm-7.2.0.jar

-package simtk.openmm

-library OpenMM
/Applications/anaconda3/pkgs/openmm-7.2.0-py36_3/include/OpenMMCWrapper.h

-library AmoebaOpenMM
/Applications/anaconda3/pkgs/openmm-7.2.0-py36_3/include/AmoebaOpenMMCWrapper.h
                </source>
                <p>
                    The configuration file contains the various flags needed to set up generation of the wrappers as
                    well as information about where to locate the OpenMM C header files.
                </p>
                <p>
                    Important flags include:
                    <ul>
                        <li>-runtime sets the runtime library that will be used to generate the wrapper classes,
                            in this case JNA
                        </li>
                        <li>-direct tells the JNAerator to use the fastest direct call convention
                            for library generation
                        </li>
                        <li>-skipDeprecated skips the generation of any deprecated members</li>
                        <li>-mode specifies the output mode for the JNAerator</li>
                        <li>-package sets the java package where all the generated output will reside (our package
                            is called simtk.openmm)
                        </li>
                        <li>-library sets the name of the output library. Importantly, after the library
                            flag you must specifiy (ie set the path to) where the CWrapper.h files are located. There
                            are two libraries we use to generate our wrapper classes for OpenMM.
                        </li>
                    </ul>
                </p>
                <p>
                    For additional documentation on flags available to edit the configuration file visit the
                    <a href="https://github.com/nativelibs4java/JNAerator/wiki/Command-Line-Options-And-Environment-Variables">JNAerator Wiki.</a>
                </p>
            </subsection>
            <subsection name="Including the Library in a Maven project.">
                <source>
                    <![CDATA[
                <dependency>
                    <groupId>edu.uiowa.jopenmm</groupId>
                    <artifactId>jopenmm-fat</artifactId>
                    <version>7.3.1</version>
                </dependency>]]>
                </source>
            </subsection>
            <subsection name="How the Library Works">
                <p>
                    To use the Java OpenMM Wrappers within Java, please first initialize the library using the provided
                    OpenMMUtils class:
                </p>
                <source>OpenMMUtils.init();</source>
                <p>
                    This will extract the OpenMM binary libraries from the openmm-fat.jar file to a temporary directory
                    and configure JNA to find them. OpenMM plugins can be loaded as follows:
                </p>
                <source>PointerByReference plugins = OpenMM_Platform_loadPluginsFromDirectory(OpenMMUtils.getPluginDirectory();</source>
            </subsection>
        </section>
    </body>
</document>
